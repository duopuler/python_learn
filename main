########################################################################################################################
#  Workflow script of DNN based Noise Suppression
#
#  This script shows an example to define a complete training, evaluation and testing workflow.
#
#
#  Configs:
#  Random Batch     : No
#  Feature          : Amplitude of spectrum
#  Batch_norm       : No
#  Output           : Spectrum + IBM
#
#
#  By running this script, the following processes are executed in sequence:
#
#  1. Read configs in script file /Config/implement_????
#  2. Define DNN in script file /NetworkMain/implement_????
#  3. Fetch evaluation data
#       3.1. Fetch evaluation list from memory or directories
#       3.2. Read evaluation speech wave data and noise wave data
#       3.3. Mix speech wave data and noise wave data to generate noisy wave data
#       3.4. Generate batch data for evaluation
#  4. Fetch file list for training from memory or directories
#  5. Start Tensorflow training session
#       5.1. Fetch train data
#           5.1.1. Read train speech wave data
#           5.1.2. Generate batch data for training, mix no noise in speech
#       5.2. Run training
#       5.3. Run evaluation after several training batch
#       5.4. Fetch train data
#           5.4.1. Read train speech wave data and noise wave data
#           5.4.2. Mix speech wave data and noise wave data to generate noisy wave data
#           5.4.3. Generate batch data for training
#       5.5. Run training
#       5.6. Run evaluation after several training batch
#  6. Save trained DNN in /DNN_Models/
#  7. Strat Tensorflow test session
#      7.1. Fetch test data
#           7.1.1. Fetch test list from memory or directories
#           7.1.2. Read test speech wave data, noise wave data and recorded noisy wave data
#           7.1.3. Mix speech wave data and noise wave data to generate simulated noisy wave data
#           7.1.4. Generate batch data for testing
#      7.2. Run testing for each batch
#      7.3. Save output wave data in /DNN_data/OUTPUT/
#
########################################################################################################################

#
from __future__ import division                                                                                         # to define '//' as int division, and '/' as float division
import wave                                                                                                             # to read and write .wav file
import numpy                                                                                                            # to do array operations
import tensorflow as tf                                                                                                 # to use tensorflow's functions
import os
import random

# Select a Config File
import Config.implement_0000                            as Config

# Select Modules
import Module.NetworkMain.implement_0000                as NetworkMain
import Module.GenerateEvaluationFileList.implement_0000 as GenerateEvaluationFileList
import Module.GenerateTestFileList.implement_0000       as GenerateTestFileList
import Module.GenerateTrainFileList.implement_0000      as GenerateTrainFileList
import Module.MixTestData.implement_0000                as MixTestData
import Module.MixTrainData.implement_0000               as MixTrainData
import Module.ReadEvaluationFile.implement_0000         as ReadEvaluationFile
import Module.ReadTestFile.implement_0000               as ReadTestFile
import Module.ReadTrainFile.implement_0000              as ReadTrainFile
import Module.Transform_GenerateBatch.implement_0000    as Transform_GenerateBatch
import Module.InverseTransform.implement_0000           as InverseTransform
import Module.PESQ.pesq_16k                             as PESQ


# Store input variable into a wave file
def save_wave_2_file(
    variable,
    output_file_name,
    sample_rate,
    channel_number
):
    f_wav = wave.open(output_file_name, 'wb')
    f_wav.setframerate(sample_rate)
    f_wav.setsampwidth(2)  # 16 bit quantize
    f_wav.setnchannels(channel_number)
    outwav = variable
    outwav = outwav.T  # transpose
    if( channel_number != 1):
        outwav.shape = channel_number, -1  # split channels
    f_wav.writeframes(outwav.astype('int16').tostring())
    f_wav.close()


# Define 'run()' function
def run():
    print 'enter Workflow_0000.py'


    ####################################################################################################################
    # Read Configs from config script
    ####################################################################################################################

    execute_training           = Config.execute_training
    execute_evaluation         = Config.execute_evaluation
    execute_testing            = Config.execute_testing
    execute_calcMeanVar        = Config.execute_calcMeanVar

    channel_number             = Config.channel_number                                                                  # Channel number of input .wav files
    current_time               = Config.current_time                                                                    # A string of the time when the script is executed
    sample_rate                = Config.sample_rate                                                                     # Sample rate of input .wav files
    train_times                = Config.train_times                                                                     # Number of times to train noisy speech
    train_interval             = Config.train_interval                                                                  # An interval which train loss is calculated
    evaluation_interval        = Config.evaluation_interval                                                             # An interval which evaluation loss is calculated
    train_speech_dir_list      = Config.train_speech_dir_list                                                           # The list of train speech file directories
    train_noise_dir_list       = Config.train_noise_dir_list                                                            # The list of train noise file directories
    evaluation_noisy_dir_list  = Config.evaluation_noisy_dir_list                                                       # The list of evaluation noise file directories
    test_speech_dir_list       = Config.test_speech_dir_list                                                            # The list of test speech file directories
    test_noise_dir_list        = Config.test_noise_dir_list                                                             # The list of test noise file directories
    list_output_dir            = Config.list_output_dir                                                                 # The directory where the file lists are saved
    test_output_dir            = Config.test_output_dir                                                                 # The directory of output wave files
    debug_out_dir              = Config.debug_out_dir                                                                   # The directory to save output wave during debug process
    label_type                 = Config.label_type                                                                      # Choose label between clean speech and high SNR noisy speech
    save_list                  = Config.save_list                                                                       # Choose whether the file lists are saved
    load_list                  = Config.load_list
    save_train_wav             = Config.save_train_wav                                                                  # Choose whether the train .wav files are saved
    SNR_target_list            = Config.SNR_target_list                                                                 # SNR target when mixing speech with noise in training
    SNR_test_list              = Config.SNR_test_list                                                                   # SNR target when mixing speech with noise in testing
    label_SNR_target           = Config.label_SNR_target                                                                # Used to generate a high SNR noisy speech, this speech can be used as label
    test_source_type           = Config.test_source_type
    PESQ_out                   = Config.PESQ_out
    enable_PESQ                = Config.enable_PESQ
    pesq_ref_dir               = Config.pesq_ref_dir
    keep_prob_val_0            = Config.keep_prob_layer_0                                                               # Keep prob value of layer 1 for training
    keep_prob_val_1            = Config.keep_prob_layer_1                                                               # Keep prob value of layer 2 for training
    keep_prob_val_2            = Config.keep_prob_layer_2                                                               # Keep prob value of layer 3 for training
    batch_counter              = Config.batch_counter
    IRM_mean                   = Config.IRM_mean
    IRM_var                    = Config.IRM_var

    # Read Configs of Network
    x                          = NetworkMain.x                                                                          # Tensorflow placeholder of input feature
    y_spectrum                 = NetworkMain.y_spectrum                                                                 # Tensorflow placeholder of input label
    y_binary                   = NetworkMain.y_binary                                                                   # Tensorflow placeholder of input label
    kp0                        = NetworkMain.kp0                                                                        # Tensorflow placeholder of dropout layer 1
    kp1                        = NetworkMain.kp1                                                                        # Tensorflow placeholder of dropout layer 2
    kp2                        = NetworkMain.kp2                                                                        # Tensorflow placeholder of dropout layer 3
    y_IRM                      = NetworkMain.y_IRM
    y_spectrum_noise           = NetworkMain.y_spectrum_noise

    if (execute_training == True):
        modelname = Config.modelname                                                                                    # The name of trained DNN
    else:
        modelname = Config.modelname_testonly                                                                           # The name of trained DNN

    ####################################################################################################################
    # Create DNN saver
    ####################################################################################################################

    saver = tf.train.Saver()

    ####################################################################################################################
    # Define DNN
    ####################################################################################################################

    # print 'run NetworkMain'
    train_step, \
    train_loss, \
    test_output, \
    test_IRM \
        = NetworkMain.run()                                                                                             # Define DNN


    ####################################################################################################################
    # Fetch Evaluation Batch Data
    ####################################################################################################################

    if( execute_evaluation == True ):

        # print 'run GenerateEvaluationFileList'
        evaluation_noisy_file_list\
            = GenerateEvaluationFileList.run(evaluation_noisy_dir_list
                                             )

        if (save_list == True):
            # Save Evaluation File List for noisy speech
            numpy.savez(list_output_dir + 'evaluation_noisy_file_list.npz',
                        evaluation_noisy_file_list=evaluation_noisy_file_list)

        if (load_list == True):
            # Load Evaluation File List for noisy speech
            evaluation_noisy_file_list = \
            numpy.load(list_output_dir + 'evaluation_noisy_file_list.npz')[
                'evaluation_noisy_file_list']

        # print 'run ReadEvaluationFile'
        evaluation_noisy_wave\
            = ReadEvaluationFile.run(evaluation_noisy_file_list
                                     )

        # print 'run Transform_GenerateBatch'
        evaluation_feature_batch, evaluation_label_batch, \
        evaluation_IBM_label_batch, evaluation_angle_batch, \
        evaluation_IRM_label_batch, evaluation_noise_label_batch\
            = Transform_GenerateBatch.run(evaluation_noisy_wave,
                                          evaluation_noisy_wave,
                                          evaluation_noisy_wave
                                          )

    ####################################################################################################################
    # Fetch Train File List
    ####################################################################################################################
    if (Config.execute_training == True):

        # print 'run GenerateTrainFileList'
        train_speech_file_list, \
        train_noise_file_list \
            = GenerateTrainFileList.run(train_speech_dir_list,
                                        train_noise_dir_list
                                        )

        if( save_list == True ):
            # Save Train File List for speech & noise
            numpy.savez(list_output_dir + 'train_speech_file_list.npz',
                        train_speech_file_list=train_speech_file_list)
            numpy.savez(list_output_dir + 'train_noise_file_list.npz',
                        train_noise_file_list=train_noise_file_list)

        if (load_list == True):
            # Load Train File List for speech & noise
            train_speech_file_list = numpy.load(list_output_dir + 'train_speech_file_list.npz')[
                'train_speech_file_list']
            train_noise_file_list = numpy.load(list_output_dir + 'train_noise_file_list.npz')[
                'train_noise_file_list']


    ####################################################################################################################
    # Conduct DNN Training
    ####################################################################################################################

    print current_time

    if (Config.execute_training == True):
    
        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True
        # Init all variables
        init = tf.initialize_all_variables()

        # Start Tensorflow Train Session
        with tf.Session(config=config) as sess_train:

            # print 'init variables'
            sess_train.run(init)

            # Train noisy speech
            for i_train in range(train_times):
                if i_train % len(train_speech_file_list) == 0:
                    # Make randomized speech file list
                    train_speech_file_list = random.sample(train_speech_file_list, len(train_speech_file_list))  # Randomize select speech file sequence
                    train_noise_file_list = random.sample(train_noise_file_list, len(train_noise_file_list))  # Randomize select noise file sequence
                    Config.train_speech_file_idx = 0
                    Config.train_noise_file_idx = 0
                    Config.train_speech_data_start = 0
                    Config.train_noise_data_start = 0

                # print 'run ReadTrainFile'
                train_speech_wave, \
                train_noise_wave \
                    = ReadTrainFile.run(train_speech_file_list,
                                        train_noise_file_list
                                        )                                                                               # Read wave data from Train Files

                # Enumrate SNR level in training
                for SNR_idx in range(len(SNR_target_list)):

                    SNR_target = SNR_target_list[SNR_idx]

                    # print 'run MixTrainData'
                    scaled_train_speech_wave, \
                    scaled_train_noise_wave, \
                    train_noisy_wave = \
                        MixTrainData.run(train_speech_wave,
                                         train_noise_wave,
                                         SNR_target
                                         )                                                                              # Mix speech wave and noise wave

                    if( label_type == 1 ):
                        scaled_highSNR_train_speech_wave, \
                        scaled_highSNR_train_noise_wave, \
                        train_highSNR_wave = \
                            MixTrainData.run(scaled_train_speech_wave,
                                             train_noise_wave,
                                             ( SNR_target + label_SNR_target )
                                             )                                                                          # Mix speech wave and noise wave to get high SNR noisy speech

                    if (save_train_wav == True):                                                                        # Save mixed noisy speech wave

                        #print 'save mix of train...',
                        train_speech_file_idx = Config.train_speech_file_idx

                        speech_file_name = train_speech_file_list[train_speech_file_idx].split("/")[-1]                 # Save clean speech

                        output_file_name = debug_out_dir + current_time + speech_file_name[:-4] + '_' + str(
                            SNR_target) + 'dB_clean.wav'
                        save_wave_2_file(scaled_train_speech_wave,output_file_name,sample_rate,channel_number)

                        output_file_name = debug_out_dir + current_time + speech_file_name[:-4] + '_' + str(
                            SNR_target) + 'dB_mix_noisy.wav'
                        save_wave_2_file(train_noisy_wave,output_file_name,sample_rate,channel_number)

                        if (label_type == 1):
                            output_file_name = debug_out_dir + current_time + speech_file_name[:-4] + '_' + str(
                                SNR_target) + 'dB_highSNR.wav'
                            save_wave_2_file(train_highSNR_wave,output_file_name,sample_rate,channel_number)
                        #print 'done'


                    # print 'run Transform'
                    if (label_type == 1):
                        train_feature_batch, train_label_batch, \
                        train_IBM_label_batch, train_angle_batch,\
                        train_IRM_label_batch, train_noise_label_batch = \
                            Transform_GenerateBatch.run1(train_noisy_wave,
                                                        train_highSNR_wave,
                                                        scaled_train_speech_wave,
                                                        scaled_train_noise_wave
                                                        )                                                               # Transform wave into spectrum, and then extract batch data for training
                    else:
                        train_feature_batch, train_label_batch, \
                        train_IBM_label_batch, train_angle_batch,\
                        train_IRM_label_batch, train_noise_label_batch  = \
                            Transform_GenerateBatch.run(train_noisy_wave,
                                                        scaled_train_speech_wave,
                                                        scaled_train_noise_wave
                                                        )                                                               # Transform wave into spectrum, and then extract batch data for training                    # print 'run Training'

                    if( execute_calcMeanVar == True ):

                        batch_mean = numpy.mean(train_feature_batch, axis=0)
                        batch_var = numpy.std(train_feature_batch, axis=0)

                        IRM_batch_mean = numpy.mean(train_IRM_label_batch, axis=0)
                        IRM_batch_var = numpy.std(train_IRM_label_batch, axis=0)

                        if (batch_counter == 0):
                            total_mean = batch_mean
                            total_var = batch_var

                            IRM_total_mean = IRM_batch_mean
                            IRM_total_var = IRM_batch_var

                            batch_counter = batch_counter + 1
                        else:
                            batch_counter = batch_counter + 1

                            total_ratio1 = (batch_counter - 1) / batch_counter
                            total_ratio2 = 1 / batch_counter

                            total_mean = total_ratio1 * total_mean + total_ratio2 * batch_mean
                            total_var = total_ratio1 * total_var + total_ratio2 * batch_var

                            IRM_total_mean = total_ratio1 * IRM_total_mean + total_ratio2 * IRM_batch_mean
                            IRM_total_var = total_ratio1 * IRM_total_var + total_ratio2 * IRM_batch_var

                        Config.batch_counter = batch_counter
                        if (batch_counter % 1000 == 1):
                            print str(batch_counter)



                    else:

                        # Norm IRM label
                        train_IRM_label_batch = train_IRM_label_batch - IRM_mean
                        train_IRM_label_batch = train_IRM_label_batch / IRM_var

                        sess_train.run(train_step, feed_dict={x: train_feature_batch,
                                                              y_spectrum: train_label_batch,
                                                              y_binary: train_IBM_label_batch,
                                                              kp0: keep_prob_val_0,
                                                              kp1: keep_prob_val_1,
                                                              kp2: keep_prob_val_2,
                                                              y_IRM: train_IRM_label_batch,
                                                              y_spectrum_noise: train_noise_label_batch
                                                              })                                                     # Tensorflow training of 1 batch



                        index = i_train * len(SNR_target_list) + SNR_idx

                        if (index % Config.save_network_period == 5000):
                            saver_period = tf.train.Saver()
                            saver_period.save(sess_train, './DNN_Models/' + current_time + str(index) + '_model.ckpt')

                        # print 'Run Train Loss'
                        if (index % train_interval == (train_interval-1) ):                                                                   # print train loss and evaluation loss after several training intervals
                            print 'Train Noisy Speech ',
                            print index,
                            print ' train loss:\t',
                            print sess_train.run(train_loss,
                                                 feed_dict={x: train_feature_batch,
                                                            y_spectrum: train_label_batch,
                                                            y_binary: train_IBM_label_batch,
                                                            kp0: 1.0, kp1: 1.0, kp2: 1.0,
                                                            y_IRM: train_IRM_label_batch,
                                                            y_spectrum_noise: train_noise_label_batch
                                                            })


                        if( execute_evaluation == True ):
                            # print 'Output Evaluation wav files'
                            if (index % evaluation_interval == (evaluation_interval-1)):

                                evaluation_spectrum = sess_train.run(test_output,
                                                                    feed_dict={x: evaluation_feature_batch,
                                                                                kp0: 1.0, kp1: 1.0, kp2: 1.0,
                                                                                })

                                output_wave \
                                    = InverseTransform.run(evaluation_spectrum,
                                                           evaluation_angle_batch
                                                           )  # Inverse transform to get wave

                                output_file_name = test_output_dir + current_time + str(index) + 'Evaluation_out.wav'

                                save_wave_2_file(
                                    output_wave,
                                    output_file_name,
                                    sample_rate,
                                    1
                                )

            if( execute_calcMeanVar == False ):
                # Save Network
                save_path = saver.save(sess_train, modelname)                                                           # Save all variables in DNN
            else:
                with open('mean.txt', 'at') as f_mean:
                    for i in range(len(total_mean)):
                        f_mean.write(str(total_mean[i]) + ',\t')
                with open('var.txt', 'at') as f_var:
                    for i in range(len(total_var)):
                        f_var.write(str(total_var[i]) + ',\t')

                with open('IRM_mean.txt', 'at') as f_mean:
                    for i in range(len(IRM_total_mean)):
                        f_mean.write(str(IRM_total_mean[i]) + ',\t')
                with open('IRM_var.txt', 'at') as f_var:
                    for i in range(len(IRM_total_var)):
                        f_var.write(str(IRM_total_var[i]) + ',\t')

    ####################################################################################################################
    # Conduct DNN Testing
    ####################################################################################################################
    
    Config.test_speech_file_idx   = 0  # the index of current speech file in the speech list
    Config.test_speech_data_start = 0  # the pointer in the current speech file to be read
    Config.test_noise_file_idx    = 0  # the index of current noise file in the noise list
    Config.test_noise_data_start  = 0  # the pointer in the current noise file to be read

    if( execute_testing == True ):
    
        config = tf.ConfigProto()
        config.gpu_options.allow_growth = True

        init = tf.initialize_all_variables()
        
        if( test_source_type == 0 ):

            # print 'run GenerateTestFileList'
            test_speech_file_list, \
            test_noise_file_list \
                = GenerateTestFileList.run(test_speech_dir_list,
                                           test_noise_dir_list
                                           )                                                                                # Generate Test File List
            
            if (save_list == True):
                # Save Test File List
                numpy.savez(list_output_dir + 'test_speech_file_list.npz',
                            test_speech_file_list=test_speech_file_list)
                numpy.savez(list_output_dir + 'test_noise_file_list.npz',
                            test_noise_file_list=test_noise_file_list)

            if (load_list == True):
                # Load Test File List
                test_speech_file_list = \
                    numpy.load(list_output_dir + 'test_speech_file_list.npz')[
                        'test_speech_file_list']
                test_noise_file_list = \
                    numpy.load(list_output_dir + 'test_noise_file_list.npz')[
                        'test_noise_file_list']

            with tf.Session(config=config) as sess_test:
                sess_test.run(init)
                # Restore DNN model variables
                saver.restore(sess_test, modelname)                                                                         # Restore all variables from saved DNN

                if( enable_PESQ == True ):
                    sum_PESQ = 0
                    sum_IRM_PESQ = 0
                    sum_MIX_PESQ = 0
                    cnt_PESQ = 0
                    if( os.path.exists(PESQ_out) ):
                        os.remove(PESQ_out)

                # Start Tensorflow Test Session
                for n_test in range(len(test_noise_file_list)):

                    for i_test in range(len(test_speech_file_list)):

                        # print 'run ReadTestFile'
                        Config.test_speech_file_idx = i_test
                        Config.test_noise_file_idx  = n_test
                        test_speech_wave, \
                        test_noise_wave \
                            = ReadTestFile.run(test_speech_file_list,
                                               test_noise_file_list
                                               )                                                                            # Read wave data from Train Files

                        # Enumrate SNR level in test
                        for SNR_test in SNR_test_list:

                            # print 'run MixEvaluationData'
                            test_noisy_wave, \
                            scaled_test_noise_wave \
                                = MixTestData.run(test_speech_wave,
                                                  test_noise_wave,
                                                  SNR_test
                                                  )                                                                         # Mix speech wave and noise wave

                            if (enable_PESQ == True):
                                # print 'save mix of train...',
                                noisy_file_name = debug_out_dir + 'noisy'
                                save_wave_2_file(
                                    test_noisy_wave,
                                    noisy_file_name,
                                    sample_rate,
                                    channel_number
                                )
                                PESQ_noisy_file_name = debug_out_dir + '_mono_noisy'
                                save_wave_2_file(
                                    test_noisy_wave[1],
                                    PESQ_noisy_file_name,
                                    sample_rate,
                                    1
                                )

                            # print 'run Transform'
                            test_feature_batch, test_label_batch, \
                            test_IBM_label_batch, test_angle_batch,\
                            test_IRM_label_batch, test_noise_label_batch \
                                = Transform_GenerateBatch.run(test_noisy_wave,
                                                              test_speech_wave,
                                                              scaled_test_noise_wave
                                                              )                                                             # Transform wave into spectrum, and then extract batch data for test

                            # print 'run Test'
                            test_spectrum  = numpy.zeros(( len(test_feature_batch), ((Config.frame_length // 2) + 1) ))
                            IRM            = numpy.zeros(( len(test_feature_batch), ((Config.frame_length // 2) + 1) ))

                            for i_frame in range( len(test_feature_batch) ):
                               test_feature = [test_feature_batch[i_frame]]

                               # print 'run Test'
                               test_spectrum[i_frame] = sess_test.run(test_output,
                                                                      feed_dict={x: test_feature,
                                                                                 kp0: 1.0, kp1: 1.0, kp2: 1.0}
                                                                      )                                                     # Tensorflow testing of 1 batch

                               IRM[i_frame] = sess_test.run(test_IRM,
                                                            feed_dict={x: test_feature,
                                                                       kp0: 1.0, kp1: 1.0, kp2: 1.0}
                                                            )

                            #print 'run inverse Transform'
                            output_wave = InverseTransform.run(test_spectrum, test_angle_batch)                         # Inverse transform to get wave
                            output_wave_IRM= InverseTransform.run_IRM(test_feature_batch[:,-len(IRM[0]):], IRM, test_angle_batch)

                            #print 'convert output data into wav'
                            speech_file_name = test_speech_file_list[i_test].split("/")[-1]                                 # Save output .wav file
                            noise_file_name = test_noise_file_list[n_test].split("/")[-1]

                            output_file_name_noisy = test_output_dir + current_time + '_' + speech_file_name[:-4]\
                                               + '__' + noise_file_name[:-4] + '__' + str(SNR_test) + 'dB_noisy.wav'
                            save_wave_2_file(
                                test_noisy_wave,
                                output_file_name_noisy,
                                sample_rate,
                                channel_number
                            )

                            
                            output_file_name_ns = test_output_dir + current_time + '_' + speech_file_name[:-4]\
                                               + '__' + noise_file_name[:-4] + '__' + str(SNR_test) + 'dB_out.wav'
                            save_wave_2_file(
                                output_wave,
                                output_file_name_ns,
                                sample_rate,
                                1
                            )
                            '''
                            output_file_name_IRM = test_output_dir + current_time + '_' + speech_file_name[:-4] \
                                                  + '__' + noise_file_name[:-4] + '__' + str(SNR_test) + '_IRM_out.wav'
                            save_wave_2_file(
                                output_wave_IRM,
                                output_file_name_IRM,
                                sample_rate,
                                1
                            )
                            '''


                            if (enable_PESQ == True):
                                ref_file_name = pesq_ref_dir + speech_file_name

                                current_PESQ = PESQ.run(ref_file_name, output_file_name_ns)
                                sum_PESQ = sum_PESQ + current_PESQ
                                cnt_PESQ = cnt_PESQ + 1

                                noisy_PESQ = PESQ.run(ref_file_name,PESQ_noisy_file_name)

                                print str(cnt_PESQ) + '\tnoisy: ' + str(noisy_PESQ) \
                                      + '\tout: ' + str(current_PESQ) \
                                      + '\t' + speech_file_name[:-4]\
                                      + '__' + noise_file_name[:-4] + '__' + str(SNR_test) + 'dB'
                                with open(PESQ_out, 'at') as f_PESQ:
                                    f_PESQ.write(str(noisy_PESQ)
                                                 + '\t' + str(current_PESQ)
                                                 + '\t' + speech_file_name[:-4]
                                                 + '__' + noise_file_name[:-4] + '__' + str(SNR_test) + 'dB\r\n')


                if (enable_PESQ == True):
                    sum_PESQ = sum_PESQ / cnt_PESQ
                    sum_IRM_PESQ = sum_IRM_PESQ / cnt_PESQ
                    sum_MIX_PESQ = sum_MIX_PESQ / cnt_PESQ
                    print 'MOS\t'+str(sum_PESQ) +'\t'+str(sum_IRM_PESQ)+'\t'+str(sum_MIX_PESQ)
                    with open(PESQ_out, 'at') as f_PESQ:
                        f_PESQ.write('MOS:\t'+str(sum_PESQ)+'\t'+str(sum_IRM_PESQ)+'\t'+str(sum_MIX_PESQ))

        else:

            # print 'run GenerateTestFileList'
            test_noisy_file_list0, \
            test_noisy_file_list1 \
                = GenerateTestFileList.run(Config.test_noisy_dir_list,
                                           Config.test_noisy_dir_list
                                           )                                                                                # Generate Test File List

            with tf.Session(config=config) as sess_test:
                sess_test.run(init)
                # Restore DNN model variables
                saver.restore(sess_test, modelname)                                                                         # Restore all variables from saved DNN

                if (enable_PESQ == True):
                    sum_PESQ = 0
                    cnt_PESQ = 0
                    if (os.path.exists(PESQ_out)):
                        os.remove(PESQ_out)

                # Start Tensorflow Test Session
                for i_test in range(len(test_noisy_file_list0)):

                    # print 'run ReadTestFile'
                    test_noisy_wave0, \
                    test_noisy_wave1 \
                        = ReadTestFile.run(test_noisy_file_list0,
                                           test_noisy_file_list1
                                           )                                                                                # Read wave data from Train Files

                    if (save_list == True):
                        # Save Test File List
                        numpy.savez(list_output_dir + 'test_noisy_file_list.npz',
                                    test_noisy_file_list=test_noisy_file_list0)

                    if (load_list == True):
                        # Load Test File List
                        test_noisy_file_list = \
                        numpy.load(list_output_dir + 'test_noisy_file_list.npz')[
                            'test_noisy_file_list']

                    if (enable_PESQ == True):
                        # print 'save mix of train...',
                        noisy_file_name = debug_out_dir + 'noisy'
                        save_wave_2_file(
                            test_noisy_wave0,
                            noisy_file_name,
                            sample_rate,
                            channel_number
                        )
                        PESQ_noisy_file_name = debug_out_dir + '_mono_noisy'
                        save_wave_2_file(
                            test_noisy_wave0[1],
                            PESQ_noisy_file_name,
                            sample_rate,
                            1
                        )

                    # Enumrate SNR level in test
                    # print 'run Transform'
                    test_feature_batch, \
                    test_label_batch, \
                    test_IBM_label_batch, \
                    test_angle_batch,\
                    IRM_label,\
                    noise_label_batch \
                        = Transform_GenerateBatch.run(test_noisy_wave0,
                                                      test_noisy_wave0,
                                                      test_noisy_wave0
                                                      )                                                                     # Transform wave into spectrum, and then extract batch data for test

                    # print 'run Test'
                    test_spectrum = numpy.zeros((len(test_feature_batch), ((Config.frame_length // 2) + 1)))
                    noise_spectrum = numpy.zeros((len(test_feature_batch), ((Config.frame_length // 2) + 1)))
                    test_IBM = numpy.zeros((len(test_feature_batch), ((Config.frame_length // 2) + 1)))
                    IRM = numpy.zeros((len(test_feature_batch), ((Config.frame_length // 2) + 1)))

                    for i_frame in range(len(test_feature_batch)):
                        test_feature = [test_feature_batch[i_frame]]

                        # print 'run Test'
                        test_spectrum[i_frame] = sess_test.run(test_output,
                                                               feed_dict={x: test_feature,
                                                                          kp0: 1.0, kp1: 1.0, kp2: 1.0}
                                                               )  # Tensorflow testing of 1 batch

                        IRM[i_frame] = sess_test.run(test_IRM,
                                                     feed_dict={x: test_feature,
                                                                kp0: 1.0, kp1: 1.0, kp2: 1.0}
                                                     )

                    # print 'run inverse Transform'
                    
                    output_wave = InverseTransform.run(test_spectrum * 1.0,
                                                       test_angle_batch)  # Inverse transform to get wave
                    output_wave_IRM,IRM_output = InverseTransform.run_IRM(test_feature_batch[:, -len(IRM[0]):], IRM,
                                                               test_angle_batch)

                    # print 'convert output data into wav'
                    
                    speech_file_name = test_noisy_file_list0[i_test].split("/")[-1]  # Save output .wav file

                    output_file_name = test_output_dir + current_time + '_' + speech_file_name[:-4] \
                                       + '_out.wav'
                    save_wave_2_file(
                        output_wave,
                        output_file_name,
                        sample_rate,
                        1
                    )
                    print output_file_name
                    '''
                    output_file_name_IRM = test_output_dir + current_time + '_' + speech_file_name[:-4] \
                                           + '_IRM_out.wav'
                    save_wave_2_file(
                        output_wave_IRM,
                        output_file_name_IRM,
                        sample_rate,
                        1
                    )
                    
                    output_IRM_name=test_output_dir + current_time + '_' + speech_file_name[:-4] \
                                           + '_IRM_out.bin'

                    IRM_output.tofile(output_IRM_name)
                    '''

                    if (enable_PESQ == True):

                        #ref_file_name = pesq_ref_dir + speech_file_name.split("__")[-1]+ '.wav'
                        ref_file_name = pesq_ref_dir + speech_file_name.split("__")[0]
                        if ('.wav' not in ref_file_name):
                            ref_file_name=ref_file_name+'.wav'                      

                        current_PESQ = PESQ.run(ref_file_name, output_file_name)
                        sum_PESQ = sum_PESQ + current_PESQ
                        cnt_PESQ = cnt_PESQ + 1

                        noisy_PESQ = PESQ.run(ref_file_name, PESQ_noisy_file_name)

                        print str(cnt_PESQ) + '\tnoisy: ' + str(noisy_PESQ) \
                              + '\tout: ' + str(current_PESQ) \
                              + '\t' + output_file_name[:-4]

                        with open(PESQ_out, 'at') as f_PESQ:
                            f_PESQ.write(str(noisy_PESQ)
                                         + '\t' + str(current_PESQ)
                                         + '\t' + output_file_name[:-4]+ '\n')


    print current_time
    print 'exit Workflow.py'
